// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
		relationMode = "prisma" // for Planetscale, MongoDB use relationMode = "prisma"
}

model Message {
    id        String   @id @default(cuid())
		userId    String   
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
		message   String   @db.Text
		user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

		@@index([userId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
		refresh_token     String?  @db.Text // for postgresql, mysql or sqlserver
		access_token      String?  @db.Text // for postgresql, mysql or sqlserver
    expires_at        Int?
    token_type        String?
    scope             String?
		id_token          String?  @db.Text // for postgresql, mysql or sqlserver
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
		
		@@index([userId])
    @@unique([provider, providerAccountId])

}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
		@@index([userId])
}

model User {
    id            String    @id @default(cuid())
		sender				Int 			@unique @default(autoincrement())
    name          String?
		login         String?
    email         String?   @unique
		password      String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
		message       Message[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
